require("dotenv").config();const express=require("express"),bodyParser=require("body-parser"),mongoose=require("mongoose"),_=require("lodash"),session=require("express-session"),passport=require("passport"),passportLocalMongoose=require("passport-local-mongoose"),app=express();mongoose.connect("mongodb+srv://admin-sasi:test123@cluster0.kgtzf.mongodb.net/wchDB",{useNewUrlParser:!0,useCreateIndex:!0,useUnifiedTopology:!0}),app.use(bodyParser.urlencoded({extended:!0})),app.use(express.static("public")),app.set("view engine","ejs"),app.use(session({secret:process.env.SECRET,resave:!1,saveUninitialized:!1})),app.use(passport.initialize()),app.use(passport.session());const cartSchema=new mongoose.Schema({imgSrc:String,product:String,price:String,qty:String,type:String,total:String,totalQty:String,totalPrice:String,username:String}),orderSchema=new mongoose.Schema({username:String,date:String,totalQty:String,totalPrices:String,order:{imgSrc:[String],product:[String],price:[String],qty:[String],totalPrice:[String]}}),personSchema=new mongoose.Schema({name:String,contact:Number,address:String,username:String,password:String});personSchema.plugin(passportLocalMongoose);const dealershipSchema=new mongoose.Schema({name:String,email:String,location:String,scope:String}),bulkOrderSchema=new mongoose.Schema({name:String,email:String,location:String,qty:String}),coffeeSchema=new mongoose.Schema({imgSrc:String,name:String,price:String,stock:Number}),beanSchema=new mongoose.Schema({imgSrc:String,name:String,price:String,stock:Number}),Person=mongoose.model("Person",personSchema);passport.use(Person.createStrategy()),passport.serializeUser(Person.serializeUser()),passport.deserializeUser(Person.deserializeUser());const Coffee=mongoose.model("Coffee",coffeeSchema),Bean=mongoose.model("Bean",beanSchema),Cart=mongoose.model("Cart",cartSchema),Order=mongoose.model("Order",orderSchema),Dealership=mongoose.model("Dealership",dealershipSchema),BulkOrder=mongoose.model("BulkOrder",bulkOrderSchema);app.get("/admin",(e,o)=>{o.render("admin")}),app.get("/db",(e,o)=>{o.render("/admin")}),app.get("/",(e,o)=>{e.isAuthenticated()?o.render("home-logged-in",{customerName:e.user.name}):o.render("home")}),app.get("/home",(e,o)=>{o.redirect("/")}),app.get("/coffee",(e,o)=>{Coffee.find((r,n)=>{r?console.log(r):e.isAuthenticated()?o.render("coffee-logged-in",{coffees:n}):o.render("coffee",{coffees:n})})}),app.get("/beans",(e,o)=>{Bean.find((r,n)=>{r?console.log(r):e.isAuthenticated()?o.render("beans-logged-in",{beans:n}):o.render("beans",{beans:n})})}),app.get("/about",(e,o)=>{e.isAuthenticated()?o.render("about-logged-in"):o.render("about")}),app.get("/contact",(e,o)=>{e.isAuthenticated()?o.render("contact-logged-in"):o.render("contact")}),app.get("/login",(e,o)=>{e.isAuthenticated()?o.render("home-logged-in",{customerName:e.user.name}):o.render("login",{name:"",contact:"",address:"",username:"",password:"",errMsg:"",loginEmail:"",loginPassword:"",loginErrMsg:""})}),app.get("/dealership",(e,o)=>{e.isAuthenticated()?o.render("dealership-logged-in"):o.render("dealership")}),app.get("/bulk-ordering",(e,o)=>{e.isAuthenticated()?o.render("bulk-ordering-logged-in"):o.render("bulk-ordering")}),app.get("/contact-confirmation",(e,o)=>{e.isAuthenticated()?o.render("contact-confirmation-logged-in"):o.render("contact-confirmation")}),app.get("/:webpage",(e,o)=>{e.isAuthenticated()?"coffee-logged-in"===e.params.webpage?Coffee.find((e,r)=>{if(e)console.log(e);else{let e=[];r.forEach(o=>{0!==o.stock&&o.stock>0&&e.push(o)}),o.render("coffee-logged-in",{coffees:e})}}):"beans-logged-in"===e.params.webpage?Bean.find((e,r)=>{if(e)console.log(e);else{let e=[];r.forEach(o=>{0!=o.stock&&e.push(o)}),o.render("beans-logged-in",{beans:e})}}):"contact-confirmation-logged-in"===e.params.webpage?o.render("dealership-logged-in"):"cart"===e.params.webpage?Cart.find({username:e.user.username},(r,n)=>{r?console.log(r):Person.findOne({username:e.user.username},(e,r)=>{o.render("cart",{items:n,user:r})})}):"confirmation"===e.params.webpage?o.render("confirmation"):"orders"===e.params.webpage?Order.find({username:e.user.username},(e,r)=>{console.log(r),o.render("orders",{orders:r})}):"logout"===e.params.webpage?(e.logout(),o.redirect("/")):"home-logged-in"===e.params.webpage?o.render("home-logged-in",{customerName:e.user.name}):o.render(e.params.webpage):o.render("login",{name:"",contact:"",address:"",username:"",password:"",errMsg:"",loginEmail:"",loginPassword:"",loginErrMsg:""})}),app.post("/signup",(e,o)=>{Person.find({username:e.body.username},(r,n)=>{r?console.log(r):1===n.length?(o.render("login",{name:e.body.name,contact:e.body.contact,address:e.body.address,username:e.body.username,password:e.body.password,errMsg:"Email already exists",loginEmail:"",loginPassword:"",loginErrMsg:""}),console.log("Account already exists.")):Person.register({username:e.body.username},e.body.password,(r,n)=>{r?(console.log(r),o.redirect("/login")):passport.authenticate("local")(e,o,()=>{Person.updateOne({username:e.body.username},{name:e.body.name,contact:e.body.contact,address:e.body.address,cart:{imgSrc:e.body.imgSrc,product:e.body.product,price:e.body.price,qty:e.body.qty},orders:{date:e.body.date,order:{imgSrc:e.body.imgSrc,product:e.body.product,price:e.body.price,qty:e.body.qty}}},o=>{o?console.log(o):console.log("New person registered: ("+e.body.username+")")}),o.redirect("/home-logged-in")})})})}),app.post("/login",(e,o)=>{const r=e.body.username;e.body.password;Person.find({username:r},(n,a)=>{if(n)console.log(n);else if(0!=a.length){const n=new Person({username:e.body.username,password:e.body.password});e.login(n,n=>{n?console.log(n):passport.authenticate("local")(e,o,()=>{o.redirect("/home-logged-in"),console.log("Successfully logged in "+r)})})}else o.render("login",{name:"",contact:"",address:"",username:"",password:"",errMsg:"",loginEmail:e.body.username,loginPassword:e.body.password,loginErrMsg:"Invalid credentials"}),console.log("Account doesn't exist")})}),app.post("/admin",(e,o)=>{const r=e.body.email,n=e.body.password;"a@wch"===r&&"123"===n?o.render("db",{coffeeToUpdate:"",cimgSrc:"",cname:"",cprice:"",cstock:"",bimgSrc:"",bname:"",bprice:"",bstock:"",beansToUpdate:""}):o.redirect("/admin")}),app.post("/coffeesDB",(e,o)=>{if(console.log("Operation: "+e.body.operation),"addCoffee"===e.body.operation){new Coffee({imgSrc:e.body.cimgSrc,name:_.startCase(e.body.cname),price:e.body.cprice,stock:e.body.cstock}).save(),console.log("New coffee inserted ("+_.startCase(e.body.cname)+")"),o.render("db",{coffeeToUpdate:"",cimgSrc:"",cname:"",cprice:"",cstock:"",bimgSrc:"",bname:"",bprice:"",bstock:"",beansToUpdate:""})}else"updateCoffee"===e.body.operation?""===e.body.cimgSrc&&""===e.body.cname&&""===e.body.cprice&&""===e.body.cstock?Coffee.findOne({name:_.startCase(e.body.coffeeToUpdate)},(e,r)=>{e?console.log(e):r&&(o.render("db",{coffeeToUpdate:r.name,cimgSrc:r.imgSrc,cname:r.name,cprice:r.price,cstock:r.stock,beansToUpdate:"",bimgSrc:"",bname:"",bprice:"",bstock:""}),console.log("Data rendered succesfully."))}):Coffee.updateOne({name:_.startCase(e.body.coffeeToUpdate)},{imgSrc:e.body.cimgSrc,name:_.startCase(e.body.cname),price:e.body.cprice,stock:e.body.cstock},r=>{r?console.log(r):(console.log("Updated successfully ("+_.startCase(e.body.coffeeToUpdate)+")"),o.render("db",{coffeeToUpdate:"",cimgSrc:"",cname:"",cprice:"",cstock:"",bimgSrc:"",bname:"",bprice:"",bstock:"",beansToUpdate:""}))}):"deleteCoffee"===e.body.operation&&Coffee.deleteMany({name:_.startCase(e.body.cname)},r=>{r?console.log(r):(console.log("Deleted coffee ("+_.startCase(e.body.cname)+")"),o.render("db",{coffeeToUpdate:"",cimgSrc:"",cname:"",cprice:"",cstock:"",bimgSrc:"",bname:"",bprice:"",bstock:"",beansToUpdate:""}))})}),app.post("/beansDB",(e,o)=>{if(console.log(e.body.operation),"addBeans"===e.body.operation){new Bean({imgSrc:e.body.bimgSrc,name:_.startCase(e.body.bname),price:e.body.bprice,stock:e.body.bstock}).save(),console.log("New beans inserted ("+_.startCase(e.body.bname)+")"),o.render("db",{coffeeToUpdate:"",cimgSrc:"",cname:"",cprice:"",cstock:"",bimgSrc:"",bname:"",bprice:"",bstock:"",beansToUpdate:""})}else"updateBeans"===e.body.operation?""===e.body.bimgSrc&&""===e.body.bname&&""===e.body.bprice&&""===e.body.bstock?Bean.findOne({name:_.startCase(e.body.beansToUpdate)},(e,r)=>{e?console.log(e):r&&(o.render("db",{beansToUpdate:r.name,bimgSrc:r.imgSrc,bname:r.name,bprice:r.price,bstock:r.stock,coffeeToUpdate:"",cimgSrc:"",cname:"",cprice:"",cstock:""}),console.log("Data rendered succesfully."))}):Bean.updateOne({name:_.startCase(e.body.beansToUpdate)},{imgSrc:e.body.bimgSrc,name:_.startCase(e.body.bname),price:e.body.bprice,stock:e.body.bstock},r=>{r?console.log(r):(console.log("Updated successfully ("+_.startCase(e.body.beansToUpdate)+")"),o.render("db",{coffeeToUpdate:"",cimgSrc:"",cname:"",cprice:"",cstock:"",bimgSrc:"",bname:"",bprice:"",bstock:"",beansToUpdate:""}))}):"deleteBeans"===e.body.operation&&Bean.deleteMany({name:_.startCase(e.body.bname)},r=>{r?console.log(r):(console.log("Deleted beans ("+_.startCase(e.body.bname)+")"),o.render("db",{coffeeToUpdate:"",cimgSrc:"",cname:"",cprice:"",cstock:"",bimgSrc:"",bname:"",bprice:"",bstock:"",beansToUpdate:""}))})}),app.post("/coffee",(e,o)=>{console.log(e.body),Cart.findOne({username:e.user.username,type:"coffee",product:e.body.product},(r,n)=>{if(r)console.log(r);else{let r=parseInt(e.body.price)*parseInt(e.body.qty.slice(0,1));if(null===n){new Cart({imgSrc:e.body.imgSrc,product:e.body.product,price:e.body.price,qty:e.body.qty,type:e.body.type,total:r,username:e.user.username}).save(r=>{r?console.log(r):(o.redirect("/coffee-logged-in"),console.log("Cart updated: ("+e.user.username+")"))})}else Cart.updateOne({_id:n._id},{imgSrc:e.body.imgSrc,product:e.body.product,price:e.body.price,qty:e.body.qty,type:e.body.type,total:r,username:e.user.username},e=>{e?console.log(e):(console.log("Product updated"),o.redirect("/coffee-logged-in"))})}})}),app.post("/beans",(e,o)=>{Cart.findOne({username:e.user.username,type:"beans",product:e.body.product},(r,n)=>{if(r)console.log(r);else{let r=parseInt(e.body.price)*parseInt(e.body.qty.slice(0,1));if(null===n){new Cart({imgSrc:e.body.imgSrc,product:e.body.product,price:e.body.price,qty:e.body.qty,type:e.body.type,total:r,username:e.user.username}).save(r=>{r?console.log(r):(o.redirect("/beans-logged-in"),console.log("Cart updated: ("+e.user.username+")"))})}else Cart.updateOne({_id:n._id},{imgSrc:e.body.imgSrc,product:e.body.product,price:e.body.price,qty:e.body.qty,type:e.body.type,total:r,username:e.user.username},e=>{e?console.log(e):(console.log("Product updated"),o.redirect("/beans-logged-in"))})}})}),app.post("/cart",(e,o)=>{if(console.log(e.body),e.body.deleteOne)Cart.findByIdAndDelete({_id:e.body.deleteOne},{useFindAndModify:!1},r=>{r?console.log(r):(console.log("Deleted product ("+e.body.deleteOne+")"),o.redirect("/cart"))});else if(e.body.deleteAll)Cart.deleteMany({username:e.user.username},r=>{r?console.log(r):(console.log("Deleted all products in cart ("+e.user.username+")"),o.redirect("/cart"))});else if("true"==e.body.confirm){new Order({username:e.user.username,date:e.body.date,totalQty:e.body.totalQty,totalPrices:e.body.totalPrices,order:{imgSrc:e.body.imgSrc,product:e.body.product,price:e.body.price,qty:e.body.qty,totalPrice:e.body.totalPrice}}).save(r=>{if(r)console.log(r);else{if(Array.isArray(e.body.product))for(let o=0;o<e.body.product.length;o++){let r=e.body.product[o],n=parseInt(e.body.qty[o].slice(0,1)),a=e.body.type[o];if("coffee"===a){let e=0;Coffee.findOne({name:r},(o,a)=>{e=a.stock-n,Coffee.updateOne({name:r},{stock:e},e=>{e?console.log(e):console.log("Stock updated - coffee")})})}if("beans"===a){let e=0;Bean.findOne({name:r},(o,a)=>{e=a.stock-n,Bean.updateOne({name:r},{stock:e},e=>{e?console.log(e):console.log("Stock updated - bean")})})}}else{let o=e.body.type,r=e.body.product,n=parseInt(e.body.qty.slice(0,1));if("coffee"===o){let e=0;Coffee.findOne({name:r},(o,a)=>{e=a.stock-n,Coffee.updateOne({name:r},{stock:e},e=>{e?console.log(e):console.log("Stock updated - coffee")})})}if("beans"===o){let e=0;Bean.findOne({name:r},(o,a)=>{e=a.stock-n,Bean.updateOne({name:r},{stock:e},e=>{e?console.log(e):console.log("Stock updated - bean")})})}}Cart.deleteMany({username:e.user.username},r=>{r?console.log(r):(console.log("New order by ("+e.user.username+")"),o.redirect("/confirmation"))})}})}}),app.post("/orders/:orderID",(e,o)=>{Order.findOne({_id:e.params.orderID},(e,r)=>{e?console.log(e):r&&o.render("order",{order:r})})}),app.post("/dealership",(e,o)=>{new Dealership({name:e.body.name,email:e.body.email,location:e.body.location,scope:e.body.scope}).save(),console.log("New dealership request submitted."),o.redirect("/contact-confirmation")}),app.post("/bulk-ordering",(e,o)=>{new BulkOrder({name:e.body.name,email:e.body.email,location:e.body.location,qty:e.body.qty}).save(),console.log("New bulk order request submitted."),o.redirect("/contact-confirmation")}),app.listen(3e3,()=>{console.log("Server initiated on port 3000")});
